import { Module, Module as TopModule, setGlobalThis } from './Module.js';
export class Evaluators {
    constructor(options) {
        const { globalThis = realGlobalThis, importHook = defaultImportHook, importMeta = null } = options;
        if (typeof globalThis !== 'object')
            throw new TypeError('globalThis must be an object');
        if (typeof importHook !== 'function')
            throw new TypeError('importHook must be a function');
        if (typeof importMeta !== 'object')
            throw new TypeError('importMeta must be an object');
        const parent = this;
        class Evaluators extends TopEvaluators {
            constructor(options) {
                const { globalThis = parent.#globalThis, importHook = parent.#importHook, importMeta = parent.#importMeta ?? null, } = options;
                super({ globalThis, importHook, importMeta });
            }
        }
        class Module extends TopModule {
            constructor(moduleSource, referral, importHook, importMeta) {
                super(moduleSource, referral, importHook ?? parent.#importHook, importMeta ?? parent.#importMeta);
                setGlobalThis(this, parent.#globalThis);
            }
        }
        this.#importHook = importHook;
        this.#importMeta = importMeta ?? undefined;
        this.#globalThis = globalThis;
        this.Module = Module;
        this.Evaluators = Evaluators;
    }
    Module;
    Evaluators;
    get globalThis() {
        return this.#globalThis;
    }
    // We do not support `eval` and `Function`.
    eval = eval;
    Function = Function;
    #globalThis;
    #importHook;
    #importMeta;
}
const TopEvaluators = Evaluators;
const realGlobalThis = globalThis;
/** @internal */
export function defaultImportHook() {
    throw new TypeError(`This evaluator does not have any import resolution.`);
}
//# sourceMappingURL=Evaluators.js.map